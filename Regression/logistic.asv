close all hidden
A=xlsread('..\Features\features_mega_matrix.xlsx',1,'A1:PY21');

resp = [2;1;2;1;2;2;1;2;2;1;1;2;2;1;2;1;1;1;1;2]; %RESPONDER STATUS:
                            % 1 = RESPONDER, 2 = NON-RESPONDER
TTP = A(:,7);
A = A(:,[1:6,8:end]);

[~,m] = size(A);

dev = [];
for i = 1:m
    if A(:,i) ~= zeros(size(A(:,i)))
        [~,dev(i,1),~]=mnrfit(A(:,i),resp);
        
        %figure
        %plot(A(:,i),resp,'.','MarkerSize',20)
    end
  
end

min_dev_ind = find(dev > 0 & dev < 22.3);
min_dev_ind = [min_dev_ind; 146];

% [b,~,~]=mnrfit(A(:,min_dev_ind(3)),resp)
% 
% figure; hold on
% x = linspace(min(A(:,min_dev_ind(3))),max(A(:,min_dev_ind(3))),100);
% 
% % plot(x,resp,'.','MarkerSize',20)
% y = -1./(1+exp(-(b(1)+b(2)*x))) + 2;
% plot(x,y)
% hold on
% plot(A(:,min_dev_ind(3)),resp,'.','MarkerSize',20)
% 
% pause

%visualize 1-dimensional variables and logistic regressions
% for i = 1:length(min_dev_ind)
%         figure
%         plot(A(:,min_dev_ind(i)),resp,'.','MarkerSize',20)
% end

%multivariable logistic regression
B = A(:,min_dev_ind);


K = 5; %number of groups for cross validation

pct=[];
for j =1:100 %run cross validation test 10 times
    indices = crossvalind('KFold',length(resp),K); %generate indices for K-Fold cross validation
    for k = 1:K
        test = find(indices==k); train = find(indices~=k); %generate index vectors for train and test sets
        
        %------------specific to logistic regression---------------
                
        %generate training/testing data
        C = B(train,:);
        C_resp = resp(train);
        
        T=B(test,:);
        T_resp = resp(test);
        
        %create multivariate model from training data
        [b,dev2,stats]=mnrfit(C,C_resp);
        
        %generate output from new logistic model for data in test set
        y=[];
        for i = 1 : length(test)
            a=b(1) + b(2)*T(i,1)+b(3)*T(i,2)+b(4)*T(i,3)+b(5)*T(i,4)+b(6)*T(i,5)+b(7)*T(i,6)+ b(8)*T(i,7);
            y(i) = -1/(1+exp(-a)) + 2;
        end
        
        %clean and threshold results
        y=(y'-1);
        thresh_y = round(y,0);
        T_resp = T_resp-1;
        
        %evaluate model accuracy
        num_right = sum(T_resp == thresh_y);
        pct= [pct, num_right/length(test)];
    end
end

disp(strcat('Prediction of TACE effectiveness is accurate ',num2str(100*mean(pct)),'% of the time'))  
    




