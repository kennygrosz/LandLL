ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
```
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
mean_arr_delay=c()
diff_df=c()
diff_df
mean_arr_delay
for (j in seq(1,3)) {
for (i in seq(1,length(carriers)/3)) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
ggplot(difficulty_df, aes(carriers, diff_df)) + geom_tile(aes(fill=mean_arr_delay))
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier=carriers[i])
mean_arr_delay=mean(temp$arr_delay)
}
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
mean_arr_delay=mean(temp$arr_delay)
}
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(mean_dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_dep_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay)
summary_df
mutate(summary_df, diff=mean_arr_delay-mean_dep_delap)
mutate(summary_df, diff=mean_arr_delay-mean_dep_delay)
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
ggplot(summary_df, aes(carriers, y = arrange(mean_dep_delay, desc())))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
mean_arr_delay
mean_dep_delay
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, -score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mean_dep_delay=c()
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp)
}
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp$carrier)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
ggplot(summary_df, aes(x=reorder(carriers, +score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
one")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.7*mean_arr_delay + .3*mean_dep_delay)
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score"")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',positoin="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
Patients=c(2,5)
#list of responder status of patients
ResponderStatus=c("R","NR") #in the same order as the patients
#list of features given for each patient!!!
FeatureList=c("Pre","Art","Ven","Del","TumorMask","TumorTruth","LiverMask","LiverTruth")
#----------------------------------------------------------------------------#
#load libraries, initialize variables, etc
library("oro.nifti")
library(dplyr)
#set path to current working path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set directory to current directory
T_df = NULL #reset whole data frame
#for each patient, create patient dataframe (P_df) and append to large data frame (T_df)
for (p in seq(1,length(Patients))){
print(paste("Working on Patient",Patients[p]))
P_df = NULL #reset temp data frame
#initialize relevant values
temp_FN=paste('../Raw_patient_data/',Patients[p],'/Art.nii.gz',sep="")
temp=readNIfTI(temp_FN) #pull a random image (it has to exist-- Art will always exist)
dims = dim(temp)
nx=dims[1] #x dimension of image
ny=dims[2] # size of y dimension of image
nz=dims[3] # size of z dimension of image
N=nx*ny*nz #total number of voxels
#initialize matrices for voxel locations, convert each to a vector
x_mat = array(seq(1,nx),dim = c(nx,ny,nz)) #crates 3D matrix with values corresponding to location in x dimension
x_dim = as.vector(x_mat) #converts to a vector
y_mat = array(seq(1,ny), dim = c(ny,nx,nz)) #create 3D matrix with y-values corresponding to location in x-dim
y_mat2= aperm(y_mat,c(2,1,3)) #flip matrix to be desired dimensions
y_dim=as.vector(y_mat2)
z_mat= array(seq(1,nz), dim = c(nz,ny,nx))
z_mat2=aperm(z_mat,c(3,2,1))
z_dim=as.vector(z_mat2)
#initialize columns for patient number and responder status
PN = array(Patients[p],dim = N) #vector with patient number in each entry
RS = array(ResponderStatus[p],N) #vector with responder statur (R or NR) in each entry-- CHARACTER DATA TYPE
#create initial data frame
P_df=data.frame(PN,RS,x_dim,y_dim,z_dim)
colnames(P_df)[1:5]= c("Patient","Resp. Status","x_dim","y_dim","z_dim") #change column names
head(P_df)
#now, add columns per feature
for (f in seq(1,length(FeatureList))){
#Create filename
FN=paste('../Raw_patient_data/',Patients[p],'/',FeatureList[f],'.nii.gz',sep="")
#load image
temp=readNIfTI(FN)
#vectorize inputs
temp_vec = as.vector(temp)
#print status
print(paste('loading and adding column',FeatureList[f],'for patient',Patients[p]))
#add column to dataframe
P_df[FeatureList[f]]=temp_vec
}
head(P_df)
#concatinate data frame to existing frame
if (p==1){
T_df = P_df
}
else {
T_df = rbind(T_df,P_df)
}
}
#test that T_df exists and test filtering with dplyr
head(T_df)
test=filter(T_df, Patient == 5, TumorMask == 1)
head(test)
hist(T_df)
hist(T_df$Pre)
hist(T_df$Art)
head(T_df)
test=filter(T_df,TumorMask==1)
hist(test)
hist(test$Pre)
hist(test$Ven)
test=filter(T_df,LiverMask==1)
hist(test$Pre)
hist(test$Ven)
hist(test$Pre)
hist(test$Del)
test=mutate(T_df, Del_Art = Del - Art)
test$Del_Art
hist(test$Del_Art)
test2=filter(test,LiverMask==1)
hist(test2$Del_Art)
test=mutate(T_df, Del_Art = Art-Pre)
test2=filter(test,LiverMask==1)
hist(test2$Del_Art)
test=mutate(T_df, Del_Art = Del-Pre)
test2=filter(test,LiverMask==1)
hist(test2$Del_Art)
test=mutate(T_df, Del_Art = Ven-Pre)
test2=filter(test,LiverMask==1)
hist(test2$Del_Art)
test=filer(T_df, TumorMask==1)
test=filter(T_df, TumorMask==1)
hist(T_df$Pre)
hist(test$Pre)
hist(test$Art)
hist(test$Ven)
hist(test$Del)
hist(test$Del>0)
hist(subset(test,Del>0)
)
hist(subset(test,Del>0))
hist(subset(test$Del>0))
hist(subset(test,test$Del>0))
test2=subset(test,Del>0)
hist(test2$De;)
hist(test2$Del)
test2=subset(test,Del>-500)
hist(test2$Del)
hist(test2$Ven)
hist(test2$Art)
hist(test2$Pre)
hist(T_df)
hist(T_df$Pre)
source("MatrixBuilder2.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set directory to current directory
source("MatrixBuilder2.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set directory to current directory
source("../../SuperMatrix/MatrixBuilder2.R")
source("../../SuperMatrix/MatrixBuilder2.R")
T_df
return(T_df)
source("../../SuperMatrix/MatrixBuilder2.R")
head(T_df)
source("../../SuperMatrix/MatrixBuilder2.R")
head(T_df)
#------------------run these if it is your first time running the program------------------------
#install.packages("rstudioapi")
#install.packages("dplyr")
#install.packages("oro.nifti")
#--------INPUTS: FILL OUT INFO-----------------------------------------------#
#INPUTS!!!!!!!!!!!!1
#list of patients
Patients=c(2,5)
#list of responder status of patients
ResponderStatus=c("R","NR") #in the same order as the patients
#list of features given for each patient!!!
FeatureList=c("Pre","Art","Ven","Del","TumorMask","TumorTruth","LiverMask","LiverTruth")
#----------------------------------------------------------------------------#
#load libraries, initialize variables, etc
library("oro.nifti")
library(dplyr)
library(rstudioapi)
#set path to current working path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set directory to current directory
T_df = NULL #reset whole data frame
#for each patient, create patient dataframe (P_df) and append to large data frame (T_df)
for (p in seq(1,length(Patients))){
print(paste("Working on Patient",Patients[p]))
P_df = NULL #reset temp data frame
#initialize relevant values
temp_FN=paste('../Raw_patient_data/',Patients[p],'/Art.nii.gz',sep="")
temp=readNIfTI(temp_FN) #pull a random image (it has to exist-- Art will always exist)
dims = dim(temp)
nx=dims[1] #x dimension of image
ny=dims[2] # size of y dimension of image
nz=dims[3] # size of z dimension of image
N=nx*ny*nz #total number of voxels
#initialize matrices for voxel locations, convert each to a vector
x_mat = array(seq(1,nx),dim = c(nx,ny,nz)) #crates 3D matrix with values corresponding to location in x dimension
x_dim = as.vector(x_mat) #converts to a vector
y_mat = array(seq(1,ny), dim = c(ny,nx,nz)) #create 3D matrix with y-values corresponding to location in x-dim
y_mat2= aperm(y_mat,c(2,1,3)) #flip matrix to be desired dimensions
y_dim=as.vector(y_mat2)
z_mat= array(seq(1,nz), dim = c(nz,ny,nx))
z_mat2=aperm(z_mat,c(3,2,1))
z_dim=as.vector(z_mat2)
#initialize columns for patient number and responder status
PN = array(Patients[p],dim = N) #vector with patient number in each entry
RS = array(ResponderStatus[p],N) #vector with responder statur (R or NR) in each entry-- CHARACTER DATA TYPE
#create initial data frame
P_df=data.frame(PN,RS,x_dim,y_dim,z_dim)
colnames(P_df)[1:5]= c("Patient","Resp. Status","x_dim","y_dim","z_dim") #change column names
head(P_df)
#now, add columns per feature
for (f in seq(1,length(FeatureList))){
#Create filename
FN=paste('../Raw_patient_data/',Patients[p],'/',FeatureList[f],'.nii.gz',sep="")
#load image
temp=readNIfTI(FN)
#vectorize inputs
temp_vec = as.vector(temp)
#print status
print(paste('loading and adding column',FeatureList[f],'for patient',Patients[p]))
#add column to dataframe
P_df[FeatureList[f]]=temp_vec
}
head(P_df)
#concatinate data frame to existing frame
if (p==1){
T_df = P_df
}
else {
T_df = rbind(T_df,P_df)
}
}
# #test that T_df exists and test filtering with dplyr
# head(T_df)
# dim(T_df)
#
# test=filter(T_df, Patient == 5, TumorMask == 1)
rm(list=setdiff(ls(),"T_df"))
source("../../SuperMatrix/MatrixBuilder2.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set directory to current directory
source("../../SuperMatrix/MatrixBuilder2.R")
setwd("../../SuperMatrix/MatrixBuilder2.R")
setwd("../../SuperMatrix/")
source("../../SuperMatrix/MatrixBuilder2.R")
source("MatrixBuilder2.R")
source("MatrixBuilder2.R")
source("MatrixBuilder2.R")
setwd("../../SuperMatrix/")
source("MatrixBuilder2.R")
source("MatrixBuilder2.R")
setwd("../../SuperMatrix/")
source("MatrixBuilder2.R")
setwd("../Features/LiverFeatues/")
setwd("../Features/Liver Featues/")
setwd("../Features/Liver Featues")
setwd("../Features/Liver Features")
head(T_df)
library(dplyr)
Pre_liver = select(filter(T_df, LiverMask ==1), Pre)
Liver = filter(T_df, LiverMask==1)
rm(Pre_liver)
library(ggplot2)
ggplot(Liver) + geom_histogram(aes(y=Pre))
ggplot(Liver, aes(Pre)) + geom_histogram()
Liver = filter(T_df, LiverMask==1, Pre > -500, Art > -500, Ven > -500, Del > -500)
ggplot(Liver, aes(Pre)) + geom_histogram()
Liver = filter(T_df, LiverMask==1)
ggplot(Liver, aes(Pre)) + geom_histogram(binwidth=10)
ggplot(Liver, aes(Art)) + geom_histogram(binwidth=10)
ggplot(Liver, aes(Ven)) + geom_histogram(binwidth=10)
ggplot(Liver, aes(Del)) + geom_histogram(binwidth=10)
Liver = filter(T_df, LiverMask==1, Del > -500)
ggplot(Liver, aes(Del)) + geom_histogram(binwidth=10)
Liver = filter(T_df, LiverMask==1, Pre > -500, Art > -500, Ven > -500, Del > -500)
ggplot(Liver, aes(Del)) + geom_histogram(binwidth=10)
ggplot(Liver, aes(Del)) + geom_histogram(binwidth=10) + ggplot(Liver, aes(Ven))
ggplot(Liver, aes(Del)) + geom_area(stat="bin") #geom_histogram(binwidth=10)
ggplot(Liver, aes(Del)) + geom_area(stat="bin", fill=blue) #geom_histogram(binwidth=10)
ggplot(Liver, aes(Del)) + geom_area(stat="bin", fill="blue") #geom_histogram(binwidth=10)
ggplot(Liver, aes(Del)) + geom_area(stat="bin", fill="blue",alpha=.5) #geom_histogram(binwidth=10)
ggplot(Liver) + geom_area(aes(Del),stat="bin", fill="blue",alpha=.5) #geom_histogram(binwidth=10)
ggplot(Liver) + geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10) #geom_histogram(binwidth=10)
ggplot(Liver) + +geom_area(aes(Pre),stat="bin", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10) #geom_histogram(binwidth=10)
ggplot(Liver) + geom_area(aes(Pre),stat="bin", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10) #geom_histogram(binwidth=10)
ggplot(Liver) + geom_area(aes(Pre),stat="bin", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Art),stat="bin", fill="green",alpha=.5,binwidth=10) +
geom_area(aes(Ven),stat="bin", fill="pink",alpha=.5,binwidth=10)  +
geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10)
Liver = filter(T_df, LiverMask==1, Pre > -200, Art > -200, Ven > -200, Del > -200)
ggplot(Liver) + geom_area(aes(Pre),stat="bin", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Art),stat="bin", fill="green",alpha=.5,binwidth=10) +
geom_area(aes(Ven),stat="bin", fill="pink",alpha=.5,binwidth=10)  +
geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10)
ggplot(Liver) + geom_area(aes(Pre),stat="bin", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Art),stat="bin", fill="green",alpha=.5,binwidth=10) +
geom_area(aes(Ven),stat="bin", fill="pink",alpha=.5,binwidth=10)  +
geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10) +
theme(legend.position="top") +
labs(title="Four Liver Phases", x="HU",y="Frequency")
ggplot(Liver) + geom_area(aes(Pre),stat="bin", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Art),stat="bin", fill="green",alpha=.5,binwidth=10) +
geom_area(aes(Ven),stat="bin", fill="pink",alpha=.5,binwidth=10)  +
geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10) +
theme(legend.position="left") +
labs(title="Four Liver Phases", x="HU",y="Frequency")
ggplot(Liver) + geom_area(aes(Pre),stat="bin",color="red", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Art),stat="bin", fill="green",alpha=.5,binwidth=10) +
geom_area(aes(Ven),stat="bin", fill="pink",alpha=.5,binwidth=10)  +
geom_area(aes(Del),stat="bin", fill="blue",alpha=.5,binwidth=10) +
theme(legend.position="left") +
labs(title="Four Liver Phases", x="HU",y="Frequency")
ggplot(Liver) + geom_area(aes(Pre),stat="bin",color="red", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Art),stat="bin", fill="green",color="green",alpha=.5,binwidth=10) +
geom_area(aes(Ven),stat="bin", fill="pink",color="pink",alpha=.5,binwidth=10)  +
geom_area(aes(Del),stat="bin", fill="blue",color="blue",alpha=.5,binwidth=10) +
theme(legend.position="left") +
scale_colour_manual("Legend:", values = c("red","green","pink","blue")) +
labs(title="Four Liver Phases", x="HU",y="Frequency")
ggplot(Liver) + geom_area(aes(Pre, color = "Pre"),stat="bin",color="red", fill="red",alpha=.5,binwidth=10)+
geom_area(aes(Art, color = "Art"),stat="bin", fill="green",color="green",alpha=.5,binwidth=10) +
geom_area(aes(Ven, color = "Ven"),stat="bin", fill="pink",color="pink",alpha=.5,binwidth=10)  +
geom_area(aes(Del, color = "Del"),stat="bin", fill="blue",color="blue",alpha=.5,binwidth=10) +
theme(legend.position="left") +
scale_colour_manual("Legend:", values = c("red","green","pink","blue")) +
labs(title="Four Liver Phases", x="HU",y="Frequency")
Tumor = filter(T_df, TumorMask == 1, Pre > -200, Art > -200, Ven > -200, Del > -200)
geom_area(aes(Art))
ggplot(Liver) +
geom_area(aes(Art))
geom_area(aes(Art), stat="bin")
ggplot(Liver) +
geom_area(aes(Art), stat="bin")
geom_area(aes(Tumor$Are), stat = "bin")
ggplot(Liver) +
geom_area(aes(Art), stat="bin") +
geom_area(aes(Tumor$Are), stat = "bin")
ggplot(Liver) +
geom_area(aes(Art), stat="bin") +
geom_area(aes(Tumor$Art), stat = "bin")
geom_area(data = Tumor, aes(Art), stat = "bin")
ggplot(Liver) +
geom_area(aes(Art), stat="bin") +
geom_area(data = Tumor, aes(Art), stat = "bin")
ggplot(Liver) +
geom_area(aes(Art), stat="bin", fill = "blue",alpha=.5) +
geom_area(data = Tumor, aes(Art), stat = "bin", fill = "red")
ggplot(Liver) +
geom_area(aes(Ven), stat="bin", fill = "blue",alpha=.5) +
geom_area(data = Tumor, aes(Ven), stat = "bin", fill = "red")
Liver = mutate(Liver, new = Del - Art)
Tumor = mutate(Tumor, new= Del - Art)
ggplot(Liver) +
geom_area(aes(new), stat="bin", fill = "blue",alpha=.5) +
geom_area(data = Tumor, aes(new), stat = "bin", fill = "red")
Liver = mutate(Liver, new = Art - Pre)
Tumor = mutate(Tumor, new= Art - Pre)
ggplot(Liver) +
geom_area(aes(new), stat="bin", fill = "blue",alpha=.5) +
geom_area(data = Tumor, aes(new), stat = "bin", fill = "red")
