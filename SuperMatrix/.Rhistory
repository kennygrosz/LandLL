ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (Minutes after midnight)')+ggtitle('Peak flight times')+ scale_fill_discrete(name="Difficulty Level of Departure Time")
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (Minutes after midnight)')+ggtitle('Peak flight times')+ scale_fill_discrete(name="Difficulty Level of \n Departure Time")
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (Minutes after midnight)')+ggtitle('Peak flight times across nycflights database')+ ylab("Number of flights") scale_fill_discrete(name="Difficulty Level of \n Departure Time")
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (min after midnight)')+ggtitle('Peak flight times across nycflights database')+ ylab("Number of flights") scale_fill_discrete(name="Difficulty Level of \n Departure Time")
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (min after midnight)')+ggtitle('Peak flight times across nycflights database')+ ylab("Number of flights") scale_fill_discrete(name="Difficulty Level of \n Departure Time")
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (min after midnight)')+ggtitle('Peak flight times across nycflights database')+ ylab("Number of flights") + scale_fill_discrete(name="Difficulty Level of \n Departure Time")
freq=hist(Q9$arr_delay, plot=TRUE, bins=10)
freq=hist(Q9$dep_time_mpm, plot=TRUE, breaks=seq(0,24*60,by=30))
freq=hist(Q9$dep_time_mpm, plot=FALSE, breaks=seq(0,24*60,by=30))
print(freq)
breaks=freq$breaks
counts=freq$counts
hist(Q9$arr_delay)
del_split=(max(Q9$arr_delay)-min(Q9$arr_delay))/10
del_breaks=seq(min(Q9$arr_delay),max($Q9_delay),length=11)
del_breaks=seq(min(Q9$arr_delay),max(Q9$arr_delay),length=11)
Q9=filter(Q9,!is.na(arr_delay))
del_breaks=seq(min(Q9$arr_delay),max(Q9$arr_delay),length=11)
del_breaks
Q9=mutate(Q9, diff_score=arr_delay*dep_difficulty)
ggplot2(Q9, aes(Q9$carrier, y=diff_score))
ggplot(Q9, aes(Q9$carrier, y=diff_score))
ggplot(Q9, aes(Q9$carrier, y=diff_score))+geom_histogram()
ggplot(Q9, aes(Q9$carrier, y=diff_score))+geom_bar()
ggplot(Q9, aes(x=Q9$carrier, y=diff_score))+geom_bar()
ggplot(Q9, aes(x=Q9$carrier, y=diff_score))+geom_bar(stat="identity")
ggplot(Q9, aes(x=Q9$carrier, y=diff_score))+geom_bar(stat="identity")
ggplot(Q9, aes(x=Q9$carrier, y=Q9$iff_score))+geom_bar(stat="identity")
ggplot(Q9, aes(x=Q9$carrier, y=Q9$diff_score))+geom_bar(stat="identity")
ggplot(Q9, aes(x=Q9$carrier, y=Q9$diff_score))+geom_bar(stat="identity")
NA>4
score_cut=(max(counts)-min(counts))/3
score_cut
#now, classify each time period into its corresponding difficulty score
count_score=c()
for (i in seq(1,length(counts))){
count_score[i]=floor((counts[i]-min(counts))/score_cut) +1 #score between 1 and 10 depending in a bin
}
count_score
#function that gives you the difficulty of a certain flight departure time based on above info
dep_diff <- function(dep_time, breaks, count_score) {
#now, classify each time period into its corresponding difficulty score
count_score=c()
for (i in seq(1,length(counts))){
count_score[i]=floor((counts[i]-min(counts)-1)/score_cut) +1 #score between 1 and 10 depending in a bin
}
count_score
}
score_cut
#now, classify each time period into its corresponding difficulty score
count_score=c()
for (i in seq(1,length(counts))){
count_score[i]=floor((counts[i]-min(counts)-1)/score_cut) +1 #score between 1 and 10 depending in a bin
}
count_score
#function that gives you the difficulty of a certain flight departure time based on above info
dep_diff <- function(dep_time, breaks, count_score) {
dep_diff1=c()
for (j in seq(1,length(dep_time))) {
i=2
flag=0
while (flag==0) {
if (breaks[i]>=dep_time[j]) { #find which bin dep_time falls into
dep_diff1[j]=count_score[i-1]  #assign the corresponding score to the departure
flag=1
}
i=i+1
}
}
return(dep_diff1)
}
dep_diff(800,breaks,count_score)
#now, add departure difficulty to the original data frame
Q9= mutate(Q9, dep_difficulty = dep_diff(dep_time_mpm,breaks,count_score))
head(select(Q9, dep_time_mpm, dep_difficulty))
Q9$dep_difficulty2=as.character(Q9$dep_difficulty)
ggplot(Q9, aes(dep_time_mpm)) + geom_histogram(color="black",aes(fill=Q9$dep_difficulty2)) + xlab('Time of Day (Minutes after midnight)')+ggtitle('Peak flight times')
ggplot(Q9, aes(dep_time_mpm)) + geom_histogram(color="black",aes(fill=Q9$dep_difficulty2)) + xlab('Time of Day (Minutes after midnight)')+ggtitle('Peak flight times')
#produce plot of difficulty levels for flight times
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (min after midnight)')+ggtitle('Peak flight times across nycflights database')+ ylab("Number of flights") + scale_fill_discrete(name="Difficulty Level of \n Departure Time")
ggplot(Q9, aes(x=Q9$carrier, y=Q9$diff_score))+geom_bar(stat="identity")
levels(Q9$carrier)
unique(Q9$carrier)
carr=unique(Q9$carrier)
avg1=c()
avg2=c()
avg3=c()
for (i in seq(1,length(carr)){
for (i in seq(1,length(carr)){
for (i in seq(1,length(carr)){
for (i in seq(1,length(carr))){
avg1[i]=mean(filter(Q9, carrier=carr[i], del_difficuly="1"))
avg2[i]=mean(filter(Q9, carrier=carr[i], del_difficuly="2"))
avg3[i]=mean(filter(Q9, carrier=carr[i], del_difficuly="3"))
}
for (i in seq(1,length(carr))){
avg1[i]=mean(filter(Q9, carrier==carr[i], del_difficuly=="1"))
avg2[i]=mean(filter(Q9, carrier==carr[i], del_difficuly=="2"))
avg3[i]=mean(filter(Q9, carrier==carr[i], del_difficuly=="3"))
}
for (i in seq(1,length(carr))){
avg1[i]=mean(filter(Q9, carrier==carr[i], dep_difficuly2=="1"))
avg2[i]=mean(filter(Q9, carrier==carr[i], dep_difficuly2=="2"))
}
avg3[i]=mean(filter(Q9, carrier==carr[i], dep_difficuly2=="3"))
for (i in seq(1,length(carr))){
avg1[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="1"))
avg3[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="3"))
avg2[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="2"))
}
avg1
avg2
avg1[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="1", !is.na(dep_difficulty2))
for (i in seq(1,length(carr))){
avg1[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="1", !is.na(dep_difficulty2))
avg2[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="2"))
avg3[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="3"))
}
avg3=c()
for (i in seq(1,length(carr))){
avg1[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="1", !is.na(dep_difficulty2)))
avg2[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="2"))
avg3[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="3"))
}
avg1
for (i in seq(1,length(carr))){
avg1[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="1", !is.na(dep_difficulty2), !is.na(carrier)))
avg2[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="2"))
}
avg3[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="3"))
for (i in seq(1,length(carr))){
avg1[i]=mean(select(filter(Q9, carrier==carr[i], dep_difficulty2=="1", !is.na(dep_difficulty2), !is.na(carrier)),arr_delay))
avg2[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="2"))
avg3[i]=mean(filter(Q9, carrier==carr[i], dep_difficulty2=="3"))
}
avg1
filter(Q9, is.na(carrier))
filter(Q9, is.na(dep_difficulty2))
filter(Q9, is.na(dep_difficulty2))
ggplot(Q9, aes(carrier, origin))
ggplot(Q9, aes(carrier, origin)) + geom_tile(aes(fill=dep_delay))
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=mean(Q9$dep_difficulty2)), color="black")+ xlab('Time of Day (min after midnight)')+ggtitle('Peak flight times across nycflights database')+ ylab("Number of flights") + scale_fill_discrete(name="Difficulty Level of \n Departure Time")
ggplot(Q9, aes(dep_time_mpm)) + stat_bin(breaks=breaks, aes(fill=Q9$dep_difficulty2), color="black")+ xlab('Time of Day (min after midnight)')+ggtitle('Peak flight times across nycflights database')+ ylab("Number of flights") + scale_fill_discrete(name="Difficulty Level of \n Departure Time")
ggplot(Q9, aes(x=Q9$carrier, y=Q9$diff_score))+geom_bar(stat="identity")
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=mean(dep_delay)))
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
distinct(Q9, carrier)
carriers=distinct(Q9, carrier)
mean_dep_delay=c()
for (i in length(carriers)) {
mean_dep_delay[i]=select(filter(Q9, carrier=carriers[i]),dep_delay)
}
carriers=distinct(Q9, carrier)
mean_dep_delay=c()
for (i in length(carriers)) {
mean_dep_delay[i]=select(filter(Q9, carrier==carriers[i]),dep_delay)
}
carriers=distinct(Q9, carrier)
mean_dep_delay=c()
for (i in length(carriers)) {
temp=filter(Q9, carrier==carriers[i])
mean_dep_delay[i]=mean(select(temp,dep_delay))
}
carriers=distinct(Q9, carrier)
carriers[1]
carriers[1]
carriers{1}
carriers=unique(Q9, carrier)
carriers=unique(Q9$carrier)
mean_dep_delay=c()
for (i in length(carriers)) {
temp=filter(Q9, carrier==carriers[i])
mean_dep_delay[i]=mean(select(temp,dep_delay))
}
mean_dep_delay=c()
for (i in length(carriers)) {
temp=filter(Q9, carrier==carriers[i], !is.na(dep_delay))
mean_dep_delay[i]=mean(select(temp,dep_delay))
}
View(temp)
for (i in length(carriers)) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay))
mean_arr_delay[i]=mean(select(temp,arr_delay))
}
carriers=unique(Q9$carrier)
mean_dep_delay=c()
mean_arr_delay=c()
for (i in length(carriers)) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay))
mean_arr_delay[i]=mean(select(temp,arr_delay))
}
carriers=unique(Q9$carrier)
carriers
carriers
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay))
mean_arr_delay[i]=mean(select(temp,arr_delay))
}
temp=filter(Q9, carrier==carriers[3], !is.na(arr_delay))
filter(temp, is.na(arr_delay))
select(temp, arr_delay)
mean(temp$arr_delay)
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay))
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay
carriers=c(unique(Q9$carrier),unique(Q9$carrier),unique(Q9$carrier))
carriers
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in c("1","2","3")) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay))
mean_arr_delay[i]=mean(temp$arr_delay)
diff_df[i]=j
}}
diff_df
mean_arr_delay
diff_uniq=c("1","2","3")
diff_uniq=c("1","2","3")
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq(j))
mean_arr_delay[(j-1)*length(carriers)+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)+i]=j
}}
diff_df
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)+i]=j
}}
diff_df
mean_arr_delay
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_uniq=c("1","2","3")
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
}
mean_arr_delay
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
```
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
mean_arr_delay=c()
diff_df=c()
diff_df
mean_arr_delay
for (j in seq(1,3)) {
for (i in seq(1,length(carriers)/3)) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
ggplot(difficulty_df, aes(carriers, diff_df)) + geom_tile(aes(fill=mean_arr_delay))
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier=carriers[i])
mean_arr_delay=mean(temp$arr_delay)
}
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
mean_arr_delay=mean(temp$arr_delay)
}
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(mean_dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_dep_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay)
summary_df
mutate(summary_df, diff=mean_arr_delay-mean_dep_delap)
mutate(summary_df, diff=mean_arr_delay-mean_dep_delay)
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
ggplot(summary_df, aes(carriers, y = arrange(mean_dep_delay, desc())))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
mean_arr_delay
mean_dep_delay
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, -score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mean_dep_delay=c()
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp)
}
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp$carrier)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
ggplot(summary_df, aes(x=reorder(carriers, +score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
one")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.7*mean_arr_delay + .3*mean_dep_delay)
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score"")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',positoin="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
library("oro.nifti")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set directory to current directory
Patients=c(2,5)
ResponderStatus=c("R","NR") #in the same order as the patients
FeatureList=c("Pre","Art","Ven","Del","TumorMask","TumorTruth","LiverMask","LiverTruth")
T_df = NULL #reset whole data frame
for (p in seq(1,length(Patients))){
print(paste("Working on Patient",Patients[p]))
P_df = NULL #reset temp data frame
#initialize relevant values
temp_FN=paste('../Raw_patient_data/',Patients[p],'/Art.nii.gz',sep="")
temp=readNIfTI(temp_FN) #pull a random image (it has to exist-- Art will always exist)
dims = dim(temp)
nx=dims[1] #x dimension of image
ny=dims[2] # size of y dimension of image
nz=dims[3] # size of z dimension of image
N=nx*ny*nz #total number of voxels
#initialize matrices for voxel locations, convert each to a vector
x_mat = array(seq(1,nx),dim = c(nx,ny,nz)) #crates 3D matrix with values corresponding to location in x dimension
x_dim = as.vector(x_mat) #converts to a vector
y_mat = array(seq(1,ny), dim = c(ny,nx,nz)) #create 3D matrix with y-values corresponding to location in x-dim
y_mat2= aperm(y_mat,c(2,1,3)) #flip matrix to be desired dimensions
y_dim=as.vector(y_mat2)
z_mat= array(seq(1,nz), dim = c(nz,ny,nx))
z_mat2=aperm(z_mat,c(3,2,1))
z_dim=as.vector(z_mat2)
#initialize columns for patient number and responder status
PN = array(Patients[p],dim = N) #vector with patient number in each entry
RS = array(ResponderStatus[p],N) #vector with responder statur (R or NR) in each entry-- CHARACTER DATA TYPE
#create initial data frame
P_df=data.frame(PN,RS,x_dim,y_dim,z_dim)
colnames(P_df)[1:5]= c("Patient","Resp. Status","x_dim","y_dim","z_dim") #change column names
head(P_df)
#now, add columns per feature
for (f in seq(1,length(FeatureList))){
#Create filename
FN=paste('../Raw_patient_data/',Patients[p],'/',FeatureList[f],'.nii.gz',sep="")
#load image
temp=readNIfTI(FN)
#vectorize inputs
temp_vec = as.vector(temp)
#print status
print(paste('loading and adding column',FeatureList[f],'for patient',Patients[p]))
#add column to dataframe
P_df[FeatureList[f]]=temp_vec
}
head(P_df)
#concatinate data frame to existing frame
if (p==1){
T_df = P_df
}
else {
T_df = rbind(T_df,P_df)
}
}
head(T_df)
dim(T_df)
library(dplyr)
test=filter(T_df, Patient == 5)
test=filter(T_df, Patient == 5, TumorMask == 1)
test=subset(T_df, Patient == 5, TumorMask == 1)
test=dplyr(T_df, Patient == 5, TumorMask == 1)
test=filter(T_df, Patient == 5, TumorMask == 1)
